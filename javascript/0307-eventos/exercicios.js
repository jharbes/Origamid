/*

ADDEVENTLISTENER
Adiciona uma fun√ß√£o ao elemento, esta chamada de callback, que ser√° ativada assim que certo evento ocorrer neste elemento.

O terceiro par√¢metro √© opcional.

*/

const img = document.querySelector('img');

// elemento.addEventListener(event, callback, options)
img.addEventListener('click', function() {
  console.log('Clicou');
})




/*

CALLBACK
√â boa pr√°tica separar a fun√ß√£o de callback do addEventListener, ou seja, declarar uma fun√ß√£o ao inv√©s de passar diretamente uma fun√ß√£o an√¥nima

*/

const img1 = document.querySelector('img');
function callback() {
  console.log('Clicou');
}

img1.addEventListener('click', callback); // üöÄ - maneira correta

img1.addEventListener('click', callback()); // undefined - n√£o se deve passar a funcao e ja ativar ela, deve se usar a maneira anterior sem os parenteses

img1.addEventListener('click', function() {
  console.log('Clicou');
})

img1.addEventListener('click', () => {
  console.log('Clicou');
})




/*

EVENT
O primeiro par√¢metro do callback √© referente ao evento que ocorreu.

Geralmente utilizam 'e' como nome do par√¢metro

*/

const img2 = document.querySelector('img');

function callback(event) {
  console.log(event);
}

img2.addEventListener('click', callback);
